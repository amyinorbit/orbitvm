//
// valid orbit operators:
// + - / * % ^ & | < > = >= <= == += ~ >> << && || != ! ?
//


// Statements

//
// Expressions
//


block           ::= (<statement>)*

// Function Calls
func-call       ::= <identifier> <parameters>
parameters      ::= "(" (<expression-list>)? ")"
expression-list ::= <expression> ("," <expression>)*


//
// Declarations
//
// Functions

func-decl       ::= <func-proto> "{" <block> "}"
func-proto      ::= "func" <identifier> <arguments> ":" <type>
arguments       ::= "(" (<argument-list>)? ")"
argument-list   ::= <argument> ("," <argument>)*
argument        ::= <identifier> ":" <type>

// Variables

var-decl        ::= "var" identifier ((":", type) | ((":", type)? "=" expression))
var-assign      ::= identifier "=" expression





(* Basics *)

type            ::= <primitive>
                  | <array-type>
                  | <dict-type>
                  | <user-type>
primitive       ::= "Nil"
                  | "Number"
                  | "Boolean"
                  | "String"
                  | "Any"
array-type      ::= "[" <type> "]"
dict-type       ::= "[" <type> ":" <type> "]"
user-type       ::= <identifier>


//
// Literals
//

(* Number Literals *)

number          ::= <float-literal>
                  | <integer-literal>
float-literal   ::= <fractional>
                  | <exponential>
fractional      ::= <sign> <decimal> "." <decimal>
exponential     ::= <sign> <decimal> "e" <sign> <decimal>
integer-literal ::= <sign> <decimal>

decimal         ::= [0-9]+
sign            ::= "+"
                  | "-"
                  | <>
                  
string-literal = \" [^\r\n\\\"]* \"

