#!/usr/bin/env python3

import argparse
import os
import subprocess

class Invocation(object):
    
    def __init__(self, args):
        #print(args)
        self.repo_dir = os.path.dirname(os.path.realpath(__file__))
        self.build_dir = "%s/build" % self.repo_dir
        
        self.dry_run = args.dry_run
        self.run_tests = args.run_tests
        self.build_jobs = args.jobs
        self.generator = args.generator
        self.config = args.config
        self.action = args.action
        self.install_dir = args.install_dir
            
    
    def __doCmd(self, cmd):
        if self.dry_run:
            print(" ".join([str(x) for x in cmd]))
        else:
            process = subprocess.Popen(cmd,
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE)
            out, err = process.communicate()
            errcode = process.returncode
            if not errcode == 0:
                print("error: %s" % err)
    
    def run(self):
        print("Orbit Build Toolchain")
        print("=====================")
        self.__doCmd(["mkdir", "-p", self.build_dir])
        self.__doCmd(["cmake",
            "-B%s" % self.build_dir,
            "-H%s" % self.repo_dir,
            "-G", self.generator,
            "-DCMAKE_INSTALL_PREFIX:PATH=%s" % self.install_dir])
        self.__doCmd(["cmake",
            "--build", self.build_dir,
            "--target", self.action])
        if self.run_tests:
            self.__doCmd(["ctest",
                self.build_dir])
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        #formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description="""Builds Orbit and its tooling.""")
    
    parser.add_argument(
        "-n", "--dry-run",
        help="prints the commands, does",
        action="store_true")    
    
    parser.add_argument(
        "-j", "--jobs",
        help="the number of parallel build jobs to use",
        type=int,
        default=1)
    
    parser.add_argument("-t", "--run-tests",
        help="runs the test suite after build",
        action="store_true",
        dest="run_tests")
    
    parser.add_argument("-g", "--generator",
        help="the build system to generate files for",
        default="Ninja",
        dest="generator")

    parser.add_argument("-c", "--config",
        help="the type of binaries to generate",
        default="release")
    
    parser.add_argument("-p", "--prefixed",
        help="appends a dated prefix to the toolchain",
        action="store_true",
        default=False,
        dest="prefixed")
    
    parser.add_argument("-d", "--install-dir",
        help="the installation root directory",
        dest="install_dir")
    
    parser.add_argument("action",
        help="the action to perform",
        default="install")
    Instance = Invocation(parser.parse_args())
    try:
        Instance.run()
    except e:
        print("error: %s" % e)