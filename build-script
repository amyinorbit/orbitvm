#!/usr/bin/env python

import argparse
import os
import subprocess
import platform
import datetime

class Command(object):
    
    def __init__(self, cmd):
        self.cmd = cmd
        self.args = []
    
    def add_args(self, *args):
        for arg in args:
            self.args.append(str(arg))
    
    def run(self, dry=False):
        if dry:
            print("%s %s" % (self.cmd, " ".join([str(x) for x in self.args])))
        else:
            process = subprocess.Popen([self.cmd] + self.args,
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE)
            out, err = process.communicate()
            errcode = process.returncode
            if not errcode == 0:
                print("error: %s" % err)

class Invocation(object):
    @staticmethod
    def make_prefix():
        now = datetime.datetime.now()
        return ("orbit-%s-%s-%04d%02d%02d-" % (
            platform.system(),
            platform.processor(),
            now.year,
            now.month,
            now.day
        )).lower()
        
    
    def __init__(self, args):
        #print(args)
        self.repo_dir = os.path.dirname(os.path.realpath(__file__))
        self.build_dir = "%s/build" % self.repo_dir
        
        self.dry_run = args.dry_run
        self.run_tests = args.run_tests
        self.build_jobs = args.jobs
        self.generator = args.generator
        self.config = args.config
        self.action = args.action
        self.install_dir = args.install_dir
        
        self.prefix = Invocation.make_prefix() if args.prefixed else ""
    
    def run(self):
        print("Orbit Build Toolchain")
        print("=====================")
        
        print("creating build directory")
        create = Command("mkdir")
        create.add_args("-p", self.build_dir)
        create.run(self.dry_run)
        
        os.chdir(self.build_dir)
        print("generating build files")
        conf = Command("cmake")
        conf.add_args("-B%s" % self.build_dir,
                      "-H%s" % self.repo_dir,
                      "-G", self.generator,
                      "-DORBIT_TOOLCHAIN_PREFIX:String=%s" % self.prefix)
        if self.install_dir:
            conf.add_args("-DCMAKE_INSTALL_PREFIX:PATH=%s" % self.install_dir)
        conf.run(self.dry_run)
        
        print("building project target '%s'" % self.action)
        build = Command("cmake")
        build.add_args("--build", self.build_dir,
                       "--target", self.action)
        build.run(self.dry_run)
        if not self.run_tests: return
        
        print("running tests")
        test = Command("ctest")
        test.add_args("--output-on-failure", self.build_dir)
        test.run(self.dry_run)
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        #formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description="""Builds Orbit and its tooling.""")
    
    parser.add_argument(
        "-n", "--dry-run",
        help="prints the commands, does",
        action="store_true")    
    
    parser.add_argument(
        "-j", "--jobs",
        help="the number of parallel build jobs to use",
        type=int,
        default=1)
    
    parser.add_argument("-t", "--run-tests",
        help="runs the test suite after build",
        action="store_true",
        dest="run_tests")
    
    parser.add_argument("-g", "--generator",
        help="the build system to generate files for",
        default="Ninja",
        dest="generator")

    parser.add_argument("-c", "--config",
        help="the type of binaries to generate",
        default="release")
    
    parser.add_argument("-p", "--prefixed",
        help="appends a dated prefix to the toolchain",
        action="store_true",
        default=False,
        dest="prefixed")
    
    parser.add_argument("-d", "--install-dir",
        help="the installation root directory",
        dest="install_dir")
    
    parser.add_argument("action",
        help="the action to perform",
        default="install")
    Instance = Invocation(parser.parse_args())
    try:
        Instance.run()
    except e:
        print("error: %s" % e)